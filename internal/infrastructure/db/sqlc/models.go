// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BackgroundCheckStatus string

const (
	BackgroundCheckStatusAPPROVED BackgroundCheckStatus = "APPROVED"
	BackgroundCheckStatusPENDING  BackgroundCheckStatus = "PENDING"
	BackgroundCheckStatusREJECTED BackgroundCheckStatus = "REJECTED"
)

func (e *BackgroundCheckStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BackgroundCheckStatus(s)
	case string:
		*e = BackgroundCheckStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BackgroundCheckStatus: %T", src)
	}
	return nil
}

type NullBackgroundCheckStatus struct {
	BackgroundCheckStatus BackgroundCheckStatus `json:"background_check_status"`
	Valid                 bool                  `json:"valid"` // Valid is true if BackgroundCheckStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBackgroundCheckStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BackgroundCheckStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BackgroundCheckStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBackgroundCheckStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BackgroundCheckStatus), nil
}

type CompanySector string

const (
	CompanySectorHOTEL   CompanySector = "HOTEL"
	CompanySectorMINERIA CompanySector = "MINERIA"
	CompanySectorTURISMO CompanySector = "TURISMO"
)

func (e *CompanySector) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CompanySector(s)
	case string:
		*e = CompanySector(s)
	default:
		return fmt.Errorf("unsupported scan type for CompanySector: %T", src)
	}
	return nil
}

type NullCompanySector struct {
	CompanySector CompanySector `json:"company_sector"`
	Valid         bool          `json:"valid"` // Valid is true if CompanySector is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompanySector) Scan(value interface{}) error {
	if value == nil {
		ns.CompanySector, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CompanySector.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompanySector) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CompanySector), nil
}

type CompanyStatus string

const (
	CompanyStatusACTIVE    CompanyStatus = "ACTIVE"
	CompanyStatusSUSPENDED CompanyStatus = "SUSPENDED"
)

func (e *CompanyStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CompanyStatus(s)
	case string:
		*e = CompanyStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CompanyStatus: %T", src)
	}
	return nil
}

type NullCompanyStatus struct {
	CompanyStatus CompanyStatus `json:"company_status"`
	Valid         bool          `json:"valid"` // Valid is true if CompanyStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCompanyStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CompanyStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CompanyStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCompanyStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CompanyStatus), nil
}

type DriverStatus string

const (
	DriverStatusACTIVE   DriverStatus = "ACTIVE"
	DriverStatusINACTIVE DriverStatus = "INACTIVE"
)

func (e *DriverStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DriverStatus(s)
	case string:
		*e = DriverStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DriverStatus: %T", src)
	}
	return nil
}

type NullDriverStatus struct {
	DriverStatus DriverStatus `json:"driver_status"`
	Valid        bool         `json:"valid"` // Valid is true if DriverStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDriverStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DriverStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DriverStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDriverStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DriverStatus), nil
}

type Language string

const (
	LanguageEs Language = "es"
	LanguageEn Language = "en"
	LanguagePt Language = "pt"
	LanguageFr Language = "fr"
)

func (e *Language) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Language(s)
	case string:
		*e = Language(s)
	default:
		return fmt.Errorf("unsupported scan type for Language: %T", src)
	}
	return nil
}

type NullLanguage struct {
	Language Language `json:"language"`
	Valid    bool     `json:"valid"` // Valid is true if Language is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLanguage) Scan(value interface{}) error {
	if value == nil {
		ns.Language, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Language.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLanguage) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Language), nil
}

type LicenseClass string

const (
	LicenseClassA1 LicenseClass = "A1"
	LicenseClassA2 LicenseClass = "A2"
	LicenseClassA3 LicenseClass = "A3"
	LicenseClassA4 LicenseClass = "A4"
	LicenseClassA5 LicenseClass = "A5"
	LicenseClassB  LicenseClass = "B"
	LicenseClassC  LicenseClass = "C"
	LicenseClassD  LicenseClass = "D"
	LicenseClassE  LicenseClass = "E"
)

func (e *LicenseClass) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = LicenseClass(s)
	case string:
		*e = LicenseClass(s)
	default:
		return fmt.Errorf("unsupported scan type for LicenseClass: %T", src)
	}
	return nil
}

type NullLicenseClass struct {
	LicenseClass LicenseClass `json:"license_class"`
	Valid        bool         `json:"valid"` // Valid is true if LicenseClass is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullLicenseClass) Scan(value interface{}) error {
	if value == nil {
		ns.LicenseClass, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.LicenseClass.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullLicenseClass) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.LicenseClass), nil
}

type PaymentGateway string

const (
	PaymentGatewayWEBPAYPLUS PaymentGateway = "WEBPAY_PLUS"
)

func (e *PaymentGateway) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentGateway(s)
	case string:
		*e = PaymentGateway(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentGateway: %T", src)
	}
	return nil
}

type NullPaymentGateway struct {
	PaymentGateway PaymentGateway `json:"payment_gateway"`
	Valid          bool           `json:"valid"` // Valid is true if PaymentGateway is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentGateway) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentGateway, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentGateway.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentGateway) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentGateway), nil
}

type PaymentStatus string

const (
	PaymentStatusAPPROVED PaymentStatus = "APPROVED"
	PaymentStatusREJECTED PaymentStatus = "REJECTED"
	PaymentStatusPENDING  PaymentStatus = "PENDING"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus `json:"payment_status"`
	Valid         bool          `json:"valid"` // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type RequestStatus string

const (
	RequestStatusPENDIENTE  RequestStatus = "PENDIENTE"
	RequestStatusASIGNADA   RequestStatus = "ASIGNADA"
	RequestStatusENRUTA     RequestStatus = "EN_RUTA"
	RequestStatusCOMPLETADA RequestStatus = "COMPLETADA"
	RequestStatusCANCELADA  RequestStatus = "CANCELADA"
)

func (e *RequestStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RequestStatus(s)
	case string:
		*e = RequestStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RequestStatus: %T", src)
	}
	return nil
}

type NullRequestStatus struct {
	RequestStatus RequestStatus `json:"request_status"`
	Valid         bool          `json:"valid"` // Valid is true if RequestStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRequestStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RequestStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RequestStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRequestStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RequestStatus), nil
}

type ReservationStatus string

const (
	ReservationStatusACTIVA     ReservationStatus = "ACTIVA"
	ReservationStatusPROGRAMADA ReservationStatus = "PROGRAMADA"
	ReservationStatusCOMPLETADA ReservationStatus = "COMPLETADA"
	ReservationStatusCANCELADA  ReservationStatus = "CANCELADA"
)

func (e *ReservationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ReservationStatus(s)
	case string:
		*e = ReservationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ReservationStatus: %T", src)
	}
	return nil
}

type NullReservationStatus struct {
	ReservationStatus ReservationStatus `json:"reservation_status"`
	Valid             bool              `json:"valid"` // Valid is true if ReservationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullReservationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ReservationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ReservationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullReservationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ReservationStatus), nil
}

type UserRole string

const (
	UserRoleADMIN   UserRole = "ADMIN"
	UserRoleUSER    UserRole = "USER"
	UserRoleDRIVER  UserRole = "DRIVER"
	UserRoleCOMPANY UserRole = "COMPANY"
)

func (e *UserRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserRole(s)
	case string:
		*e = UserRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UserRole: %T", src)
	}
	return nil
}

type NullUserRole struct {
	UserRole UserRole `json:"user_role"`
	Valid    bool     `json:"valid"` // Valid is true if UserRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserRole) Scan(value interface{}) error {
	if value == nil {
		ns.UserRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserRole), nil
}

type UserStatus string

const (
	UserStatusACTIVE  UserStatus = "ACTIVE"
	UserStatusBLOCKED UserStatus = "BLOCKED"
)

func (e *UserStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserStatus(s)
	case string:
		*e = UserStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for UserStatus: %T", src)
	}
	return nil
}

type NullUserStatus struct {
	UserStatus UserStatus `json:"user_status"`
	Valid      bool       `json:"valid"` // Valid is true if UserStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserStatus) Scan(value interface{}) error {
	if value == nil {
		ns.UserStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UserStatus), nil
}

type VehicleStatus string

const (
	VehicleStatusAVAILABLE   VehicleStatus = "AVAILABLE"
	VehicleStatusASSIGNED    VehicleStatus = "ASSIGNED"
	VehicleStatusMAINTENANCE VehicleStatus = "MAINTENANCE"
	VehicleStatusINACTIVE    VehicleStatus = "INACTIVE"
)

func (e *VehicleStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VehicleStatus(s)
	case string:
		*e = VehicleStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for VehicleStatus: %T", src)
	}
	return nil
}

type NullVehicleStatus struct {
	VehicleStatus VehicleStatus `json:"vehicle_status"`
	Valid         bool          `json:"valid"` // Valid is true if VehicleStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVehicleStatus) Scan(value interface{}) error {
	if value == nil {
		ns.VehicleStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VehicleStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVehicleStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VehicleStatus), nil
}

type VehicleType string

const (
	VehicleTypeBUS   VehicleType = "BUS"
	VehicleTypeVAN   VehicleType = "VAN"
	VehicleTypeSEDAN VehicleType = "SEDAN"
	VehicleTypeSUV   VehicleType = "SUV"
)

func (e *VehicleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = VehicleType(s)
	case string:
		*e = VehicleType(s)
	default:
		return fmt.Errorf("unsupported scan type for VehicleType: %T", src)
	}
	return nil
}

type NullVehicleType struct {
	VehicleType VehicleType `json:"vehicle_type"`
	Valid       bool        `json:"valid"` // Valid is true if VehicleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVehicleType) Scan(value interface{}) error {
	if value == nil {
		ns.VehicleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.VehicleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVehicleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.VehicleType), nil
}

type Company struct {
	ID           pgtype.UUID        `json:"id"`
	Name         string             `json:"name"`
	Rut          string             `json:"rut"`
	ContactEmail string             `json:"contact_email"`
	Status       CompanyStatus      `json:"status"`
	Sector       CompanySector      `json:"sector"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type Driver struct {
	ID        string             `json:"id"`
	FirstName string             `json:"first_name"`
	LastName  string             `json:"last_name"`
	RutOrDni  string             `json:"rut_or_dni"`
	BirthDate pgtype.Date        `json:"birth_date"`
	Phone     *string            `json:"phone"`
	Email     *string            `json:"email"`
	PhotoUrl  *string            `json:"photo_url"`
	Status    DriverStatus       `json:"status"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type DriverAvailability struct {
	DriverID   string             `json:"driver_id"`
	Regions    []byte             `json:"regions"`
	Days       []byte             `json:"days"`
	TimeRanges []byte             `json:"time_ranges"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

type DriverBackgroundCheck struct {
	DriverID  string                `json:"driver_id"`
	Status    BackgroundCheckStatus `json:"status"`
	FileUrl   *string               `json:"file_url"`
	CheckedAt pgtype.Timestamptz    `json:"checked_at"`
}

type DriverFeedback struct {
	ID            pgtype.UUID        `json:"id"`
	TripID        string             `json:"trip_id"`
	PassengerName string             `json:"passenger_name"`
	Rating        int32              `json:"rating"`
	Comment       *string            `json:"comment"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

type DriverLicense struct {
	DriverID  string       `json:"driver_id"`
	Number    string       `json:"number"`
	Class     LicenseClass `json:"class"`
	IssuedAt  pgtype.Date  `json:"issued_at"`
	ExpiresAt pgtype.Date  `json:"expires_at"`
	FileUrl   *string      `json:"file_url"`
}

type Hotel struct {
	ID           pgtype.UUID        `json:"id"`
	Name         string             `json:"name"`
	City         string             `json:"city"`
	ContactEmail string             `json:"contact_email"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
}

type Payment struct {
	ID             pgtype.UUID        `json:"id"`
	ReservationID  string             `json:"reservation_id"`
	Gateway        PaymentGateway     `json:"gateway"`
	Amount         pgtype.Numeric     `json:"amount"`
	Currency       string             `json:"currency"`
	Status         PaymentStatus      `json:"status"`
	TransactionRef *string            `json:"transaction_ref"`
	Payload        []byte             `json:"payload"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
}

type RefreshToken struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type RegistrationToken struct {
	ID        pgtype.UUID        `json:"id"`
	Token     string             `json:"token"`
	Email     string             `json:"email"`
	OrgID     pgtype.UUID        `json:"org_id"`
	Role      UserRole           `json:"role"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
	Used      *bool              `json:"used"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

type Request struct {
	ID               pgtype.UUID        `json:"id"`
	HotelID          pgtype.UUID        `json:"hotel_id"`
	CompanyID        pgtype.UUID        `json:"company_id"`
	Fecha            pgtype.Timestamptz `json:"fecha"`
	Origin           []byte             `json:"origin"`
	Destination      []byte             `json:"destination"`
	Pax              int32              `json:"pax"`
	VehicleType      VehicleType        `json:"vehicle_type"`
	Language         NullLanguage       `json:"language"`
	Status           RequestStatus      `json:"status"`
	AssignedDriverID *string            `json:"assigned_driver_id"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
}

type Reservation struct {
	ID               string             `json:"id"`
	UserID           pgtype.UUID        `json:"user_id"`
	OrgID            pgtype.UUID        `json:"org_id"`
	Pickup           string             `json:"pickup"`
	Destination      string             `json:"destination"`
	Datetime         pgtype.Timestamptz `json:"datetime"`
	Passengers       int32              `json:"passengers"`
	Status           ReservationStatus  `json:"status"`
	Amount           pgtype.Numeric     `json:"amount"`
	Notes            *string            `json:"notes"`
	CreatedAt        pgtype.Timestamptz `json:"created_at"`
	UpdatedAt        pgtype.Timestamptz `json:"updated_at"`
	AssignedDriverID *string            `json:"assigned_driver_id"`
}

type ReservationTimeline struct {
	ID            pgtype.UUID        `json:"id"`
	ReservationID string             `json:"reservation_id"`
	Title         string             `json:"title"`
	Description   string             `json:"description"`
	At            pgtype.Timestamptz `json:"at"`
	Variant       string             `json:"variant"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
}

type User struct {
	ID           pgtype.UUID        `json:"id"`
	Name         string             `json:"name"`
	Email        string             `json:"email"`
	PasswordHash string             `json:"password_hash"`
	Role         UserRole           `json:"role"`
	Status       UserStatus         `json:"status"`
	OrgID        pgtype.UUID        `json:"org_id"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
	UpdatedAt    pgtype.Timestamptz `json:"updated_at"`
	// Profile type for COMPANY role users. Valid values: COMPANY_ADMIN (full access), COMPANY_USER (limited access)
	CompanyProfile *string `json:"company_profile"`
}

type Vehicle struct {
	ID                  pgtype.UUID        `json:"id"`
	DriverID            *string            `json:"driver_id"`
	Type                VehicleType        `json:"type"`
	Brand               string             `json:"brand"`
	Model               string             `json:"model"`
	Year                *int32             `json:"year"`
	Plate               *string            `json:"plate"`
	Vin                 *string            `json:"vin"`
	Color               *string            `json:"color"`
	InsurancePolicy     *string            `json:"insurance_policy"`
	InsuranceExpiresAt  pgtype.Date        `json:"insurance_expires_at"`
	InspectionExpiresAt pgtype.Date        `json:"inspection_expires_at"`
	CreatedAt           pgtype.Timestamptz `json:"created_at"`
	UpdatedAt           pgtype.Timestamptz `json:"updated_at"`
	Status              VehicleStatus      `json:"status"`
	Capacity            *int32             `json:"capacity"`
}

type VehiclePhoto struct {
	ID        pgtype.UUID        `json:"id"`
	VehicleID pgtype.UUID        `json:"vehicle_id"`
	Url       string             `json:"url"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}
