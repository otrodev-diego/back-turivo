// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: password_reset_tokens.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPasswordResetToken = `-- name: CreatePasswordResetToken :one
INSERT INTO password_reset_tokens (user_id, token, expires_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, token, expires_at, used, created_at
`

type CreatePasswordResetTokenParams struct {
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreatePasswordResetToken(ctx context.Context, arg CreatePasswordResetTokenParams) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, createPasswordResetToken, arg.UserID, arg.Token, arg.ExpiresAt)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredPasswordResetTokens = `-- name: DeleteExpiredPasswordResetTokens :exec
DELETE FROM password_reset_tokens
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredPasswordResetTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredPasswordResetTokens)
	return err
}

const getPasswordResetTokenByToken = `-- name: GetPasswordResetTokenByToken :one
SELECT id, user_id, token, expires_at, used, created_at FROM password_reset_tokens
WHERE token = $1
`

func (q *Queries) GetPasswordResetTokenByToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRow(ctx, getPasswordResetTokenByToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.Used,
		&i.CreatedAt,
	)
	return i, err
}

const markPasswordResetTokenAsUsed = `-- name: MarkPasswordResetTokenAsUsed :exec
UPDATE password_reset_tokens
SET used = TRUE
WHERE token = $1
`

func (q *Queries) MarkPasswordResetTokenAsUsed(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, markPasswordResetTokenAsUsed, token)
	return err
}
