// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%' OR email ILIKE '%' || $1 || '%')
  AND ($2::user_role IS NULL OR role = $2)
  AND ($3::user_status IS NULL OR status = $3)
`

type CountUsersParams struct {
	Column1 string     `json:"column_1"`
	Column2 UserRole   `json:"column_2"`
	Column3 UserStatus `json:"column_3"`
}

func (q *Queries) CountUsers(ctx context.Context, arg CountUsersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, arg.Column1, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password_hash, role, org_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, password_hash, role, status, org_id, created_at, updated_at
`

type CreateUserParams struct {
	Name         string      `json:"name"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	Role         UserRole    `json:"role"`
	OrgID        pgtype.UUID `json:"org_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.OrgID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password_hash, role, status, org_id, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password_hash, role, status, org_id, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, email, password_hash, role, status, org_id, created_at, updated_at FROM users
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%' OR email ILIKE '%' || $1 || '%')
  AND ($2::user_role IS NULL OR role = $2)
  AND ($3::user_status IS NULL OR status = $3)
ORDER BY 
  CASE WHEN $4 = 'name' THEN name END,
  CASE WHEN $4 = 'email' THEN email END,
  CASE WHEN $4 = 'created_at' THEN created_at END DESC
LIMIT $5 OFFSET $6
`

type ListUsersParams struct {
	Column1 string      `json:"column_1"`
	Column2 UserRole    `json:"column_2"`
	Column3 UserStatus  `json:"column_3"`
	Column4 interface{} `json:"column_4"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.PasswordHash,
			&i.Role,
			&i.Status,
			&i.OrgID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET name = COALESCE($2, name),
    email = COALESCE($3, email),
    password_hash = COALESCE($4, password_hash),
    role = COALESCE($5, role),
    status = COALESCE($6, status),
    org_id = COALESCE($7, org_id),
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, email, password_hash, role, status, org_id, created_at, updated_at
`

type UpdateUserParams struct {
	ID           pgtype.UUID `json:"id"`
	Name         string      `json:"name"`
	Email        string      `json:"email"`
	PasswordHash string      `json:"password_hash"`
	Role         UserRole    `json:"role"`
	Status       UserStatus  `json:"status"`
	OrgID        pgtype.UUID `json:"org_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Role,
		arg.Status,
		arg.OrgID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Role,
		&i.Status,
		&i.OrgID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
