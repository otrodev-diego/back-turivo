// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: companies.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCompanies = `-- name: CountCompanies :one
SELECT COUNT(*) FROM companies
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%' OR rut ILIKE '%' || $1 || '%')
  AND ($2::company_status IS NULL OR status = $2)
  AND ($3::company_sector IS NULL OR sector = $3)
`

type CountCompaniesParams struct {
	Column1 string        `json:"column_1"`
	Column2 CompanyStatus `json:"column_2"`
	Column3 CompanySector `json:"column_3"`
}

func (q *Queries) CountCompanies(ctx context.Context, arg CountCompaniesParams) (int64, error) {
	row := q.db.QueryRow(ctx, countCompanies, arg.Column1, arg.Column2, arg.Column3)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCompany = `-- name: CreateCompany :one
INSERT INTO companies (name, rut, contact_email, status, sector)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, rut, contact_email, status, sector, created_at, updated_at
`

type CreateCompanyParams struct {
	Name         string        `json:"name"`
	Rut          string        `json:"rut"`
	ContactEmail string        `json:"contact_email"`
	Status       CompanyStatus `json:"status"`
	Sector       CompanySector `json:"sector"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, createCompany,
		arg.Name,
		arg.Rut,
		arg.ContactEmail,
		arg.Status,
		arg.Sector,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rut,
		&i.ContactEmail,
		&i.Status,
		&i.Sector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM companies WHERE id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCompany, id)
	return err
}

const getCompanyByID = `-- name: GetCompanyByID :one
SELECT id, name, rut, contact_email, status, sector, created_at, updated_at FROM companies WHERE id = $1
`

func (q *Queries) GetCompanyByID(ctx context.Context, id pgtype.UUID) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByID, id)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rut,
		&i.ContactEmail,
		&i.Status,
		&i.Sector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCompanyByRUT = `-- name: GetCompanyByRUT :one
SELECT id, name, rut, contact_email, status, sector, created_at, updated_at FROM companies WHERE rut = $1
`

func (q *Queries) GetCompanyByRUT(ctx context.Context, rut string) (Company, error) {
	row := q.db.QueryRow(ctx, getCompanyByRUT, rut)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rut,
		&i.ContactEmail,
		&i.Status,
		&i.Sector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCompanies = `-- name: ListCompanies :many
SELECT id, name, rut, contact_email, status, sector, created_at, updated_at FROM companies
WHERE ($1::text IS NULL OR name ILIKE '%' || $1 || '%' OR rut ILIKE '%' || $1 || '%')
  AND ($2::company_status IS NULL OR status = $2)
  AND ($3::company_sector IS NULL OR sector = $3)
ORDER BY 
  CASE WHEN $4 = 'name' THEN name END,
  CASE WHEN $4 = 'rut' THEN rut END,
  CASE WHEN $4 = 'created_at' THEN created_at END DESC
LIMIT $5 OFFSET $6
`

type ListCompaniesParams struct {
	Column1 string        `json:"column_1"`
	Column2 CompanyStatus `json:"column_2"`
	Column3 CompanySector `json:"column_3"`
	Column4 interface{}   `json:"column_4"`
	Limit   int32         `json:"limit"`
	Offset  int32         `json:"offset"`
}

func (q *Queries) ListCompanies(ctx context.Context, arg ListCompaniesParams) ([]Company, error) {
	rows, err := q.db.Query(ctx, listCompanies,
		arg.Column1,
		arg.Column2,
		arg.Column3,
		arg.Column4,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Company{}
	for rows.Next() {
		var i Company
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Rut,
			&i.ContactEmail,
			&i.Status,
			&i.Sector,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE companies
SET name = COALESCE($2, name),
    rut = COALESCE($3, rut),
    contact_email = COALESCE($4, contact_email),
    status = COALESCE($5, status),
    sector = COALESCE($6, sector),
    updated_at = NOW()
WHERE id = $1
RETURNING id, name, rut, contact_email, status, sector, created_at, updated_at
`

type UpdateCompanyParams struct {
	ID           pgtype.UUID   `json:"id"`
	Name         string        `json:"name"`
	Rut          string        `json:"rut"`
	ContactEmail string        `json:"contact_email"`
	Status       CompanyStatus `json:"status"`
	Sector       CompanySector `json:"sector"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (Company, error) {
	row := q.db.QueryRow(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.Rut,
		arg.ContactEmail,
		arg.Status,
		arg.Sector,
	)
	var i Company
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Rut,
		&i.ContactEmail,
		&i.Status,
		&i.Sector,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
