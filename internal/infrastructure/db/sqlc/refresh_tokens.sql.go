// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: refresh_tokens.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countRefreshTokensByUserID = `-- name: CountRefreshTokensByUserID :one
SELECT COUNT(*) FROM refresh_tokens 
WHERE user_id = $1 AND expires_at > NOW()
`

func (q *Queries) CountRefreshTokensByUserID(ctx context.Context, userID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countRefreshTokensByUserID, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (id, user_id, token, expires_at)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, token, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    pgtype.UUID        `json:"user_id"`
	Token     string             `json:"token"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRow(ctx, createRefreshToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.ExpiresAt,
	)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteExpiredRefreshTokens = `-- name: DeleteExpiredRefreshTokens :exec
DELETE FROM refresh_tokens WHERE expires_at <= NOW()
`

func (q *Queries) DeleteExpiredRefreshTokens(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteExpiredRefreshTokens)
	return err
}

const deleteRefreshToken = `-- name: DeleteRefreshToken :exec
DELETE FROM refresh_tokens WHERE token = $1
`

func (q *Queries) DeleteRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, deleteRefreshToken, token)
	return err
}

const deleteRefreshTokensByUserID = `-- name: DeleteRefreshTokensByUserID :exec
DELETE FROM refresh_tokens WHERE user_id = $1
`

func (q *Queries) DeleteRefreshTokensByUserID(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRefreshTokensByUserID, userID)
	return err
}

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT rt.id, rt.user_id, rt.token, rt.expires_at, rt.created_at, u.id as user_id, u.name as user_name, u.email as user_email, u.role as user_role, u.status as user_status, u.org_id as user_org_id
FROM refresh_tokens rt
JOIN users u ON rt.user_id = u.id
WHERE rt.token = $1 AND rt.expires_at > NOW()
`

type GetRefreshTokenByTokenRow struct {
	ID         pgtype.UUID        `json:"id"`
	UserID     pgtype.UUID        `json:"user_id"`
	Token      string             `json:"token"`
	ExpiresAt  pgtype.Timestamptz `json:"expires_at"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UserID_2   pgtype.UUID        `json:"user_id_2"`
	UserName   string             `json:"user_name"`
	UserEmail  string             `json:"user_email"`
	UserRole   UserRole           `json:"user_role"`
	UserStatus UserStatus         `json:"user_status"`
	UserOrgID  pgtype.UUID        `json:"user_org_id"`
}

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (GetRefreshTokenByTokenRow, error) {
	row := q.db.QueryRow(ctx, getRefreshTokenByToken, token)
	var i GetRefreshTokenByTokenRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UserID_2,
		&i.UserName,
		&i.UserEmail,
		&i.UserRole,
		&i.UserStatus,
		&i.UserOrgID,
	)
	return i, err
}

const getRefreshTokensByUserID = `-- name: GetRefreshTokensByUserID :many
SELECT id, user_id, token, expires_at, created_at FROM refresh_tokens 
WHERE user_id = $1 AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) GetRefreshTokensByUserID(ctx context.Context, userID pgtype.UUID) ([]RefreshToken, error) {
	rows, err := q.db.Query(ctx, getRefreshTokensByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RefreshToken{}
	for rows.Next() {
		var i RefreshToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
