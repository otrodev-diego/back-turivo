// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: reservation_timeline.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countTimelineEvents = `-- name: CountTimelineEvents :one
SELECT COUNT(*) FROM reservation_timeline rt
WHERE ($1::text IS NULL OR rt.reservation_id ILIKE '%' || $1 || '%' OR rt.title ILIKE '%' || $1 || '%')
`

func (q *Queries) CountTimelineEvents(ctx context.Context, dollar_1 string) (int64, error) {
	row := q.db.QueryRow(ctx, countTimelineEvents, dollar_1)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTimelineEvent = `-- name: CreateTimelineEvent :one
INSERT INTO reservation_timeline (id, reservation_id, title, description, at, variant)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, reservation_id, title, description, at, variant, created_at
`

type CreateTimelineEventParams struct {
	ID            pgtype.UUID        `json:"id"`
	ReservationID string             `json:"reservation_id"`
	Title         string             `json:"title"`
	Description   string             `json:"description"`
	At            pgtype.Timestamptz `json:"at"`
	Variant       string             `json:"variant"`
}

func (q *Queries) CreateTimelineEvent(ctx context.Context, arg CreateTimelineEventParams) (ReservationTimeline, error) {
	row := q.db.QueryRow(ctx, createTimelineEvent,
		arg.ID,
		arg.ReservationID,
		arg.Title,
		arg.Description,
		arg.At,
		arg.Variant,
	)
	var i ReservationTimeline
	err := row.Scan(
		&i.ID,
		&i.ReservationID,
		&i.Title,
		&i.Description,
		&i.At,
		&i.Variant,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTimelineByReservationID = `-- name: DeleteTimelineByReservationID :exec
DELETE FROM reservation_timeline WHERE reservation_id = $1
`

func (q *Queries) DeleteTimelineByReservationID(ctx context.Context, reservationID string) error {
	_, err := q.db.Exec(ctx, deleteTimelineByReservationID, reservationID)
	return err
}

const deleteTimelineEvent = `-- name: DeleteTimelineEvent :exec
DELETE FROM reservation_timeline WHERE id = $1
`

func (q *Queries) DeleteTimelineEvent(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTimelineEvent, id)
	return err
}

const getTimelineByReservationID = `-- name: GetTimelineByReservationID :many
SELECT id, reservation_id, title, description, at, variant, created_at FROM reservation_timeline 
WHERE reservation_id = $1 
ORDER BY at ASC
`

func (q *Queries) GetTimelineByReservationID(ctx context.Context, reservationID string) ([]ReservationTimeline, error) {
	rows, err := q.db.Query(ctx, getTimelineByReservationID, reservationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReservationTimeline{}
	for rows.Next() {
		var i ReservationTimeline
		if err := rows.Scan(
			&i.ID,
			&i.ReservationID,
			&i.Title,
			&i.Description,
			&i.At,
			&i.Variant,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTimelineEventByID = `-- name: GetTimelineEventByID :one
SELECT id, reservation_id, title, description, at, variant, created_at FROM reservation_timeline WHERE id = $1
`

func (q *Queries) GetTimelineEventByID(ctx context.Context, id pgtype.UUID) (ReservationTimeline, error) {
	row := q.db.QueryRow(ctx, getTimelineEventByID, id)
	var i ReservationTimeline
	err := row.Scan(
		&i.ID,
		&i.ReservationID,
		&i.Title,
		&i.Description,
		&i.At,
		&i.Variant,
		&i.CreatedAt,
	)
	return i, err
}

const listTimelineEvents = `-- name: ListTimelineEvents :many
SELECT rt.id, rt.reservation_id, rt.title, rt.description, rt.at, rt.variant, rt.created_at, r.pickup, r.destination
FROM reservation_timeline rt
LEFT JOIN reservations r ON rt.reservation_id = r.id
WHERE ($1::text IS NULL OR rt.reservation_id ILIKE '%' || $1 || '%' OR rt.title ILIKE '%' || $1 || '%')
ORDER BY rt.at DESC
LIMIT $2 OFFSET $3
`

type ListTimelineEventsParams struct {
	Column1 string `json:"column_1"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

type ListTimelineEventsRow struct {
	ID            pgtype.UUID        `json:"id"`
	ReservationID string             `json:"reservation_id"`
	Title         string             `json:"title"`
	Description   string             `json:"description"`
	At            pgtype.Timestamptz `json:"at"`
	Variant       string             `json:"variant"`
	CreatedAt     pgtype.Timestamptz `json:"created_at"`
	Pickup        *string            `json:"pickup"`
	Destination   *string            `json:"destination"`
}

func (q *Queries) ListTimelineEvents(ctx context.Context, arg ListTimelineEventsParams) ([]ListTimelineEventsRow, error) {
	rows, err := q.db.Query(ctx, listTimelineEvents, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListTimelineEventsRow{}
	for rows.Next() {
		var i ListTimelineEventsRow
		if err := rows.Scan(
			&i.ID,
			&i.ReservationID,
			&i.Title,
			&i.Description,
			&i.At,
			&i.Variant,
			&i.CreatedAt,
			&i.Pickup,
			&i.Destination,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTimelineEvent = `-- name: UpdateTimelineEvent :one
UPDATE reservation_timeline
SET title = COALESCE($2, title),
    description = COALESCE($3, description),
    at = COALESCE($4, at),
    variant = COALESCE($5, variant)
WHERE id = $1
RETURNING id, reservation_id, title, description, at, variant, created_at
`

type UpdateTimelineEventParams struct {
	ID          pgtype.UUID        `json:"id"`
	Title       string             `json:"title"`
	Description string             `json:"description"`
	At          pgtype.Timestamptz `json:"at"`
	Variant     string             `json:"variant"`
}

func (q *Queries) UpdateTimelineEvent(ctx context.Context, arg UpdateTimelineEventParams) (ReservationTimeline, error) {
	row := q.db.QueryRow(ctx, updateTimelineEvent,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.At,
		arg.Variant,
	)
	var i ReservationTimeline
	err := row.Scan(
		&i.ID,
		&i.ReservationID,
		&i.Title,
		&i.Description,
		&i.At,
		&i.Variant,
		&i.CreatedAt,
	)
	return i, err
}
